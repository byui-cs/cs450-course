# -*- coding: utf-8 -*-
"""cs450_01_python_practice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oWPbffqEh8uDHSzm4lV8OkZgZpzijWXh

# CSE 450 - Teach 01
This activity is designed to be completed in teams during class time.

In this activity you'll be practicing elements of Python that will be useful in your programming this semester.

You've been hired by ACE Ice Cream Inc. to study their sales data. They suspect that ice cream sales are positively correlated with the temperature, meaning that when the temperature increases, so do ice cream sales. They would like to quantify this.

## Part I: Build the Class

1: First, create a python class called `SimpleCorrelator` that has the following methods:

* A constructor that takes two arguments, `x` and `y` and stores them as member variables.
* A method called `x` which will return the x data.
* A method called `y` which will return the y data.
"""

import numpy as np

class SimpleCorrelator():

  def __init__(self, x, y):
    self.x = x
    self.y = y
  
  def x(self):
    return self.x
  
  def y(self):
    return self.y

  def data_summary(self):
    summary_format = "{0} - Summary\n\tsize: {1}, mean: {2}, variance: {3}, stdev: {4}\n"

    x_string = summary_format.format( "X", self.x.size, self.x.mean(), self.x.var(), self.x.std() )
    y_string = summary_format.format( "Y", self.y.size, self.y.mean(), self.y.var(), self.y.std() )

    return "{0}\n{1}".format(x_string, y_string)

  def __repr__(self):
    return self.data_summary()

  def correlation(self):
    matrix = np.corrcoef(self.x, self.y)
    scalar = matrix[0,1]
    return scalar

"""2: Create numpy arrays containing `sales` and `temperature` data:"""

# sales
sales = np.array([464.37,520.38,531.62,532.25,605.11,649.96,
                  432.75,438.40,410.72,598.27,437.15,441.57,
                  873.65,517.76,540.26,619.77,794.61,617.84,
                  351.75,727.77,504.56,564.19,697.12,461.50,
                  847.23,240.27,597.32,846.17,703.07,718.93,
                  622.53,544.62,510.13,608.06,597.89,487.62,
                  544.40,459.84,372.08,614.82,510.07,738.32,
                  756.48,360.73,271.03,533.69,586.78,743.36,
                  471.53,579.69])

# temperatures
temps = np.array([73.75,66.56,87.54,78.79,82.35,80.50,
                  76.09,74.13,74.83,76.13,76.41,72.08,
                  86.30,72.82,75.10,81.44,84.11,85.19,
                  70.34,81.89,78.31,78.35,89.29,77.31,
                  84.41,71.94,80.34,90.42,83.31,83.32,
                  76.81,74.50,73.16,77.07,81.04,77.14,
                  75.20,70.03,72.63,80.29,66.07,82.50,
                  83.00,69.97,61.72,77.11,76.07,85.83,
                  72.72,75.16])

"""3: Create an instance of your `SimpleCorrelator` class, passing in your `sales` and `temps` data as `x` and `y`, respectively."""

sc = SimpleCorrelator(sales, temps)

"""## Part 2 - CREATE SOME STATISTICAL FUNCTIONS

1: Add a `data_summary` method to your `SimpleCorrelator` class that will calculate and return a string containing the size, mean, variance, and standard deviation of both the x and y datasets. 

You should use `numpy` methods to calculate these statistics.

Print out the results of the `data_summary` method to make sure it works as expected.
"""

summary = sc.data_summary()
print(summary)

"""2: Override the `__repr__` method of your class so that when you print your class instance, it will print the results of your data_summary method."""

print(sc)

"""## Part 3 - CALCULATE THE CORRELATION COEFFICIENT

1: Add a method called `correlation` to your class that returns the correlation coefficient as a single value.

Note that there are several ways you could get this value. You could calculate it manually using the formulas provided above, or you could use a numpy method to do so.

However, many numpy methods will return a matrix of values. You will need to make sure that your method returns a scalar (single value) which represents the correlation between X and Y.

If everything worked correctly, the answer you get should be approximately `0.8`.
"""

print(sc.correlation())